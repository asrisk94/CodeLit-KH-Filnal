<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin">

	<select id="selectMemberList" resultMap="memberMap">
		select 
			*
		from 
			member m
		    	left join authorities a
		        	on m.member_id = a.member_id
		<where>
		m.member_id not in 
		    (select member_id from authorities where auth = 'ROLE_ADMIN')
		    <if test="keyword != null and keyword != ''">
		    and
		    	m.member_id like '%' || #{keyword} || '%'
		    </if>		
		</where>
	
	</select>
	
	<resultMap id="memberMap" type="member">
		<id column="member_id" property="memberId"/>
		<result column="member_pw" property="memberPw"/>
		<result column="member_profile" property="memberProfile"/>
		<result column="member_re_proflie" property="memberReProfile"/>
		<collection property="authorities" ofType="simpleGrantedAuthority">
			<constructor>
				<arg column="auth" javaType="string"/>
			</constructor>
		</collection>
	</resultMap>

	<delete id="deleteMember">
		delete from member
		where member_id = #{memberId}
	</delete>
	<select id="selectTeacherList" resultType="teacher">	
		select *
		from teacher t
				left join (select * from authorities where auth = 'ROLE_TEACHER') a
				on t.ref_member_id = a.member_id
		<where>
		a.auth = 'ROLE_TEACHER'
		<if test="keyword != null and keyword != ''">
			and
				t.ref_member_id like '%' || #{keyword} || '%'
		</if>
		<if test="category != null and category != ''">
			and
				t.ref_lec_cat_no = #{category}
		</if>
		</where>
	</select>
	
	<delete id="deleteTeacherAndAuth">
		delete from teacher
		where ref_member_id = #{refMemberId}
	</delete>
	
	<delete id="deleteTeacherAndAuth2">
		delete from teacher
		where member_id = #{refMemberId}
			and auth = "ROLE_TEACHER"
	</delete>

	 <select id="selectMemberOrderList"  resultMap="paymentMap">
		select p.*, 
		(select count(*) from pay_lecture where pay_code = p.pay_code) count
			from payment p  
			order by
			pay_date desc
			
	</select>
		<resultMap id="paymentMap" type="payment" >
		<id column="pay_code" property="payCode"/>
		<result column="ref_member_id" property="refMemberId"/>
		<result column="pay_cost" property="payCost" />
		<result column="pay_no" property="payNo" />
		<result column="count" property="count" />
		<result column="pay_date" property="payDate" />
		
		</resultMap> 
	<select id="applyTeacherList" resultMap="TeacherListMap">
		select
		 	 *
        from
    		teacher left join lecture_category
       			 on ref_lec_cat_no = lec_cat_no
         		  left join (select * from authorities where auth = 'ROLE_TEACHER')
          			on ref_member_id = member_id
		where auth is null
	</select>
	
	<resultMap type="map" id="TeacherListMap">
		<id column="ref_member_id" property="refMemberId"/>
		<result column="lec_cat_name" property="lecCatName" />
		<result column="teacher_name" property="teacherName" />
		<result column="teacher_link" property="teacherLink" />
	</resultMap>
	
	<insert id="approveTeacher">
		insert into
				authorities values ('ROLE_TEACHER', #{id})
	</insert>
	
	 <select id="applyLectureList" resultMap="LectureListMap">
		select 
       		 *
		from
   			 lecture left join lecture_category
       		 on ref_lec_cat_no = lec_cat_no
		where lecture_accept_yn = 'W'
	</select>
	
	<resultMap type="map" id="LectureListMap">
		<id column="lecture_no" property="lectureNo"/>
		<result column="lec_cat_no" property="lecCatNo" />
		<result column="lec_cat_name" property="lecCatName" />
		<result column="lecture_name" property="lectureName"/>
		<result column="ref_member_id" property="refMemberId"/>
	</resultMap> 

	<update id="approveLecture">
		update
	    	lecture
		set 
	     	lecture_accept_yn ='Y'
		where lecture_no = #{no}
	</update>
	
	<delete id="deleteTeacher">
		delete from
			teacher
		where
			ref_member_id = #{id}
	</delete>
	
	<update id="deleteLecture">
		update 
			lecture
		set 
	     	lecture_accept_yn ='N'
		where 
			lecture_no = #{no}
	</update>

	<select id="selectAllLecture" resultMap="LectureListMap">
			
	 select 
    	 l.*
	 from ( select 
            	*
       		from lecture join lecture_category 
         		on ref_lec_cat_no = lec_cat_no  ) l            
	<where>
		lecture_accept_yn = 'Y'		
     <if test="searchKeyword != null and searchKeyword != ''">
       	   and
       	   		${searchType} like '%' || #{searchKeyword} || '%' 

     </if>  	   		
     <if test="category != null and category != ''">
       	   and 
       	  		l.ref_lec_cat_no = #{category}	   
    </if>
    </where>
    	 order by lecture_no desc
	</select>
	
	<select id="getTotalContents" resultType="_int">
	
	select count(*)
	from lecture l
			left join (select * from lecture_category) c
        on ref_lec_cat_no = lec_cat_no
     <where>
      	lecture_accept_yn ='Y'
      	<if test="searchKeyword != null and searchKeyword != ''">
      	and
      		l.ref_member_id like '%' || #{searchKeyword} || '%'
      	</if>
      	<if test="category != null">
      	and
      		c.lec_cat_no = #{category}
      	</if>
     </where>   
	</select>
	
	<select id="selectMemberCount" resultType="_int">
		select count(*)
		from member m
			left join (select * from authorities where auth = 'ROLE_ADMIN') a
			on m.member_id = a.member_id
		<where>
			auth is null
			<if test="keyword != null and keyword != ''">
				and
					m.member_id like '%' || #{keyword} || '%'
			</if>
		</where>
	</select>

	<select id="selectTeacherCount" resultType="_int">
		select count(*)
		from teacher t
				left join (select * from authorities where auth = 'ROLE_TEACHER') a
				on t.ref_member_id = a.member_id
		<where>
			auth = 'ROLE_TEACHER'
			<if test="keyword != null and keyword != ''">
				and
					t.ref_member_id like '%' || #{keyword} || '%'
			</if>
			<if test="category != null">
				and
					t.ref_lec_cat_no = #{category}
			</if>
		</where>
	</select>
	 	<select id="selectMemberOrderCount" resultType="_int">
		select count(*) from payment
			
		</select> 
	<select id="searchCategory" resultMap="LectureListMap">
	<!-- 이클립스의 emp_mapper참고 -->
	select 
    	 c.lec_cat_name,
   		 l.ref_member_id,
   		 l.lecture_name
	from lecture l full join lecture_category c
            on l.lecture_no = c.lec_cat_no
	<where>l.ref_lec_cat_no = #{type} and l.lecture_accept_yn  = 'Y'
	</where>	
	
	</select>
	
	<update id="rejectPlayingLecture">
	update
    	lecture
	set lecture_accept_yn = 'W'
	where lecture_no = #{no}
	
	</update>
	
	<select id="selectClickRank" resultMap="selectClickRankMap">
		select
		    sum(click_no) sum,
		    rank() over(order by sum(click_no) desc) rank,
		    c.ref_lecture_no lecture_no,
		    l.lecture_name lecture_name,
		    lc.lec_cat_name lec_cat_name
		from lecture_click c
		    join lecture l
		        on ref_lecture_no = lecture_no
		    join lecture_category lc
		        on l.ref_lec_cat_no = lc.lec_cat_no
		group by ref_lecture_no, lecture_name, lec_cat_name
	</select>
	
	<resultMap id="selectClickRankMap" type="map">
		<id property="lectureNo" column="lecture_no" />
		<result property="clickCount" column="sum" />
		<result property="rank" column="rank" />
		<result property="lectureName" column="lecture_name" />	
		<result property="lecCatName" column="lec_cat_name" />	
	</resultMap>
	
	<select id="selectCategorySales" resultMap="selectCategorySalesMap">
		select lec_cat_name,
		        sum(lecture_price) sum,
		        rank() over(order by sum(lecture_price) desc) rank
		from lecture l
		    join lecture_category lc
		        on l.ref_lec_cat_no = lc.lec_cat_no
		    join pay_lecture pl
		        on l.lecture_no = pl.ref_lecture_no
		group by lc.lec_cat_name
	</select>

	<resultMap id="selectCategorySalesMap" type="map">
		<id property="lecCatName" column="lec_cat_name" />
		<result property="rank" column="rank" />
		<result property="sales" column="sum" />
	</resultMap>



	<select id="selectUserClick" resultMap="selectUserClickMap">
		select a.*, b.avg
		
		from
			(select
			    rank() over(order by lc.click_no desc) rank,
			    lc.ref_lecture_no,
			    l.lecture_name,
			    lc.click_no
			from lecture_click lc
			    join lecture l
			        on lc.ref_lecture_no = l.lecture_no
			where lc.ref_member_id = #{userName}) a
			
		join
			(select round(avg(click_no), 1) avg,
			    ref_lecture_no
			from lecture_click
			group by ref_lecture_no) b
			
		    on a.ref_lecture_no = b.ref_lecture_no
		    
		order by a.rank
	</select>
	<resultMap type="map" id="selectUserClickMap">
		<id column="ref_lecture_no" property="refLectureNo" />
		<result column="lecture_name" property="lectureName" />
		<result column="rank" property="rank" />
		<result column="click_no" property="clickNo" />
		<result column="avg" property="avg" />
	</resultMap>

	<select id="categorySalesSummary" resultMap="categorySalesSummaryMap">
		select 
		    l.lecture_no,
		    l.lecture_name,
		    lc.lec_cat_name,
		    p.pay_date,
		    l.lecture_price
		from pay_lecture pl
		    join payment p on pl.pay_code = p.pay_code
		    join lecture l on pl.ref_lecture_no = l.lecture_no
		    join lecture_category lc on l.ref_lec_cat_no = lc.lec_cat_no
	</select>
	<resultMap type="map" id="categorySalesSummaryMap">
		<id column="lecture_no" property="lectureNo" />
		<result column="lecture_name" property="lectureName" />
		<result column="lec_cat_name" property="lecCatName" />
		<result column="pay_date" property="payDate" />
		<result column="lecture_price" property="price" />
	</resultMap>
</mapper>